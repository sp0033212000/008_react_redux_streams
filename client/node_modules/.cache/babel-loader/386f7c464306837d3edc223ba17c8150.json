{"ast":null,"code":"var _jsxFileName = \"/Users/liaojiwei/github/008_react_redux_streams/client/src/components/streams/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return React.createElement(\"div\", {\n        className: className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, label), React.createElement(\"input\", {\n        onChange: input.onChange,\n        value: input.value,\n        onFocus: input.onFocus,\n        onBlur: input.onBlur,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return React.createElement(\"div\", {\n        className: \"ui error message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9\n        },\n        __self: this\n      }, error));\n    }\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui form error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Field, {\n      component: this.renderInput,\n      label: \"Enter Title\",\n      name: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(Field, {\n      component: this.renderInput,\n      label: \"Enter Description\",\n      name: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"ui button primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title!';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'You must enter a description!';\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);\nconsole.log(reduxForm({})(StreamForm));\nconsole.log(reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm));","map":{"version":3,"sources":["/Users/liaojiwei/github/008_react_redux_streams/client/src/components/streams/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","className","error","touched","onChange","value","onFocus","onBlur","renderError","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","description","form","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n    renderError({ error, touched }) {\n        if(touched && error) {\n            return (\n                <div className=\"ui error message\">\n                    <div className=\"header\">{error}</div>\n                </div>\n            );\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => {\n        const className = `field ${meta.error && meta.touched ? 'error' : ''}`\n        return (\n            <div className={className}>\n                <label>{label}</label>\n                <input\n                    onChange={input.onChange}\n                    value={input.value}\n                    onFocus={input.onFocus}\n                    onBlur={input.onBlur}\n                    autoComplete=\"off\"\n                />\n                {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    onSubmit = (formValues) => {\n        this.props.onSubmit(formValues);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)} className=\"ui form error\">\n                <Field component={this.renderInput} label=\"Enter Title\" name=\"title\" />\n                <Field component={this.renderInput} label=\"Enter Description\" name=\"description\" />\n                <button className=\"ui button primary\">Submit</button>\n            </form>\n        );\n    }\n}\n\nconst validate = (formValues) => {\n    const errors = {};\n\n    if(!formValues.title) {\n        errors.title = 'You must enter a title!';\n    }\n\n    if(!formValues.description) {\n        errors.description = 'You must enter a description!';\n    }\n\n    return errors;\n}\n\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate\n})(StreamForm);\nconsole.log(reduxForm({})(StreamForm))\nconsole.log(reduxForm({form: 'streamForm', validate})(StreamForm))"]},"metadata":{},"sourceType":"module"}