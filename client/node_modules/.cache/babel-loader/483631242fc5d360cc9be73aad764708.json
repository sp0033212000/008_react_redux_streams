{"ast":null,"code":"var _jsxFileName = \"/Users/liaojiwei/github/008_react_redux_streams/client/src/components/streams/StreamShow.js\";\nimport React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions/index';\n\nclass StreamShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    this.props.fetchStream(id);\n  }\n\n  componentDidUpdate() {\n    this.bulidPlayer(id);\n  }\n\n  bulidPlayer(id) {\n    if (this.player || !this.props.stream) {\n      return;\n    } else {\n      const id = this.props.match.params.id;\n      this.player = flv.createPlayer({\n        type: 'flv',\n        url: `http://localhost:8000/live/${id}.flv`\n      });\n      this.player.attachMediaElement(this.videoRef.current);\n      this.player.load();\n    }\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        className: \"ui active inverted dimmer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui text loader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Loading\"));\n    }\n\n    const _this$props$stream = this.props.stream,\n          title = _this$props$stream.title,\n          description = _this$props$stream.description;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: '100%'\n      },\n      controls: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, title), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, description));\n  }\n\n}\n\n;\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["/Users/liaojiwei/github/008_react_redux_streams/client/src/components/streams/StreamShow.js"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","componentDidUpdate","bulidPlayer","player","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACH;;AAEDC,EAAAA,iBAAiB,GAAE;AAAA,UACPC,EADO,GACA,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MADjB,CACPF,EADO;AAEf,SAAKJ,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACH;;AAEDG,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,WAAL,CAAiBJ,EAAjB;AACH;;AAEDI,EAAAA,WAAW,CAACJ,EAAD,EAAK;AACZ,QAAG,KAAKK,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWU,MAA9B,EAAsC;AAClC;AACH,KAFD,MAEO;AAAA,YACKN,EADL,GACY,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAD7B,CACKF,EADL;AAGH,WAAKK,MAAL,GAAcf,GAAG,CAACiB,YAAJ,CAAiB;AAC3BC,QAAAA,IAAI,EAAE,KADqB;AAE3BC,QAAAA,GAAG,EAAG,8BAA6BT,EAAG;AAFX,OAAjB,CAAd;AAIA,WAAKK,MAAL,CAAYK,kBAAZ,CAA+B,KAAKb,QAAL,CAAcc,OAA7C;AACA,WAAKN,MAAL,CAAYO,IAAZ;AACH;AACJ;;AAEDC,EAAAA,MAAM,GAAG;AACL,QAAG,CAAC,KAAKjB,KAAL,CAAWU,MAAf,EAAuB;AACnB,aACI;AAAK,QAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADJ;AAKH;;AAPI,+BAS0B,KAAKV,KAAL,CAAWU,MATrC;AAAA,UASGQ,KATH,sBASGA,KATH;AAAA,UASUC,WATV,sBASUA,WATV;AAWL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,GAAG,EAAE,KAAKlB,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAAEmB,QAAAA,KAAK,EAAE;AAAT,OAAlC;AAAqD,MAAA,QAAQ,MAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHJ,CADJ;AAOH;;AAjDoC;;AAkDxC;;AAED,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAO;AACHb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAAClB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AADL,GAAP;AAGH,CAJD;;AAMA,eAAeT,OAAO,CAAC0B,eAAD,EAAkB;AAAEzB,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,UAA1C,CAAf","sourcesContent":["import React from 'react';\nimport flv from 'flv.js';\nimport { connect } from 'react-redux';\nimport { fetchStream } from '../../actions/index';\n\nclass StreamShow extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.videoRef = React.createRef();\n    }\n\n    componentDidMount(){\n        const { id } = this.props.match.params\n        this.props.fetchStream(id);\n    }\n    \n    componentDidUpdate() {\n        this.bulidPlayer(id);\n    }\n\n    bulidPlayer(id) {\n        if(this.player || !this.props.stream) {\n            return\n        } else {\n            const { id } = this.props.match.params\n\n            this.player = flv.createPlayer({\n                type: 'flv',\n                url: `http://localhost:8000/live/${id}.flv`\n            });\n            this.player.attachMediaElement(this.videoRef.current);\n            this.player.load();\n        }\n    }\n\n    render() {\n        if(!this.props.stream) {\n            return (\n                <div className=\"ui active inverted dimmer\">\n                    <div className=\"ui text loader\">Loading</div>\n                </div>\n            )\n        }\n\n        const { title, description } = this.props.stream\n\n        return (\n            <div>\n                <video ref={this.videoRef} style={{ width: '100%' }} controls />\n                <h1>{title}</h1>\n                <h5>{description}</h5>\n            </div>        \n        );\n    }\n};\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        stream: state.streams[ownProps.match.params.id]\n    };\n};\n\nexport default connect(mapStateToProps, { fetchStream })(StreamShow);"]},"metadata":{},"sourceType":"module"}