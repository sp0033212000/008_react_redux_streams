'use strict';

var fs = require('fs');
var cp = require('child_process');
var mkdirp = require('mkdirp');
var untildify = require('untildify');

var dir = untildify('~/Library/LaunchAgents');

module.exports = {
  dir: dir,
  getFile: getFile,
  add: add,
  create: create,
  remove: remove
};

function getFile(name) {
  return dir + '/' + name + '.plist';
}

function add(name, cmd) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var out = arguments[3];

  var array = [cmd].concat(args).map(function (a) {
    return '    <string>' + a + '</string>';
  }).join('\n');

  var file = getFile(name);

  var lines = ['<?xml version="1.0" encoding="UTF-8"?>', '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">', '<plist version="1.0">', '<dict>', '  <key>Label</key>', '  <string>' + name + '</string>', '  <key>ProgramArguments</key>', '  <array>', array, '  </array>', '  <key>RunAtLoad</key>', '  <true/>'];

  if (out) {
    lines.push('  <key>StandardOutPath</key>', '  <string>' + out + '</string>', '  <key>StandardErrorPath</key>', '  <string>' + out + '</string>');
  }

  lines.push('</dict>', '</plist>');

  var data = lines.join('\n');

  mkdirp.sync(dir);
  fs.writeFileSync(file, data);
  return file;
}

function create(name, cmd) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var out = arguments[3];

  var file = add(name, cmd, args, out);
  cp.execSync('launchctl load ' + file);
}

function remove(name) {
  var file = getFile(name);
  if (fs.existsSync(file)) fs.unlinkSync(file);
  try {
    cp.execSync('launchctl remove ' + name);
  } catch (e) {}
}