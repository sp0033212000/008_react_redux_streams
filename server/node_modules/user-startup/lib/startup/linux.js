'use strict';

var fs = require('fs');
var cp = require('child_process');
var mkdirp = require('mkdirp');
var untildify = require('untildify');

var dir = untildify('~/.config/autostart');

module.exports = {
  dir: dir,
  getFile: getFile,
  add: add,
  create: create,
  remove: remove
};

function spawn(cmd) {
  var args = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
  var out = arguments[2];

  var opts = {
    detached: true
  };

  if (out) {
    var fd = fs.openSync(out, 'w');
    opts.stdio = ['ignore', fd, fd];
  }

  cp.spawn(cmd, args, opts).on('error', console.log).unref();
}

function getFile(name) {
  return dir + '/' + name + '.desktop';
}

function add(name, cmd) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var out = arguments[3];

  var file = getFile(name);

  var command = cmd;

  if (args.length) {
    command += ' ' + args.join(' ');
  }

  if (out) {
    command += ' > ' + out;
  }

  var data = ['[Desktop Entry]', 'Type=Application', 'Vestion=1.0', 'Name=' + name, 'Comment=' + name + ' startup script', 'Exec=' + command, 'StartupNotify=false', 'Terminal=false'].join('\n');

  mkdirp.sync(dir);
  fs.writeFileSync(file, data);
  return file;
}

function create(name, cmd) {
  var args = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
  var out = arguments[3];

  add(name, cmd, args, out);
  spawn(cmd, args, out);
}

function remove(name) {
  var file = getFile(name);
  if (fs.existsSync(file)) fs.unlinkSync(file);
}